#pragma once

#include "Math\Math.hpp"
#include "Containers\String.hpp"
#include "Containers\Vector.hpp"
#include "Containers\Hashmap.hpp"

static constexpr U8 MAX_MIPMAP_COUNT = 16;
static constexpr U8	MAX_IMAGE_OUTPUTS = 8;				// Maximum number of images/render targets/fbo attachments usable
static constexpr U8	MAX_DESCRIPTOR_SET_LAYOUTS = 8;		// Maximum number of layouts in the pipeline
static constexpr U8 MAX_PIPELINE_CONNECTIONS = 16;
static constexpr U8 MAX_SPECIALIZATION_CONSTANTS = 8;	// Maximum specialization contants a shader can have
static constexpr U8	MAX_VERTEX_BUFFERS = 8;
static constexpr U8	MAX_PROGRAM_PASSES = 8;				// Maximum number of passes in a program pass group
static constexpr U8	MAX_SWAPCHAIN_IMAGES = 3;			// Maximum images a swapchain can support
static constexpr U8	MAX_VIEWPORTS = 8;					// Maximum viewports a renderpass can have
static constexpr U8	MAX_BLOOM_PASSES = 8;				// Maximum renderpasses to calculate bloom
static constexpr U8	MAX_SCISSORS = 8;					// Maximum scissors a renderpass can have

enum ResourceUpdateType
{
	RESOURCE_UPDATE_TYPE_BUFFER,
	RESOURCE_UPDATE_TYPE_TEXTURE,
	RESOURCE_UPDATE_TYPE_PIPELINE,
	RESOURCE_UPDATE_TYPE_SAMPLER,
	RESOURCE_UPDATE_TYPE_DESCRIPTOR_SET_LAYOUT,
	RESOURCE_UPDATE_TYPE_DESCRIPTOR_SET,
	RESOURCE_UPDATE_TYPE_RENDER_PASS,
	RESOURCE_UPDATE_TYPE_SHADER_STATE,

	RESOURCE_UPDATE_TYPE_COUNT
};

enum MaterialFlag
{
	MATERIAL_FLAG_NONE = 0x00,
	MATERIAL_FLAG_ALPHA_MASK = 0x01,
};

enum TextureFlag
{
	TEXTURE_FLAG_NONE = 0x00,
	TEXTURE_FLAG_RENDER_TARGET = 0x01,
	TEXTURE_FLAG_COMPUTE = 0x02,
	TEXTURE_FLAG_FORCE_GENERATE_MIPMAPS = 0x04,
};

enum SamplerType
{
	SAMPLER_TYPE_POINT,
	SAMPLER_TYPE_LINEAR,
};

#pragma region VulkanEnums

enum FilterType
{
	FILTER_TYPE_NEAREST = 0,
	FILTER_TYPE_LINEAR = 1,
	FILTER_TYPE_CUBIC_EXT = 1000015000,
	FILTER_TYPE_CUBIC_IMG = FILTER_TYPE_CUBIC_EXT,
	FILTER_TYPE_MAX_ENUM = 0x7FFFFFFF
};

enum ImageType
{
	IMAGE_TYPE_1D = 0,
	IMAGE_TYPE_2D = 1,
	IMAGE_TYPE_3D = 2,
	IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
};

enum SamplerMipmapMode
{
	SAMPLER_MIPMAP_MODE_NEAREST = 0,
	SAMPLER_MIPMAP_MODE_LINEAR = 1,
	SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
};

enum SamplerAddressMode
{
	SAMPLER_ADDRESS_MODE_REPEAT = 0,
	SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
	SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
	SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
	SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
	SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
	SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
};

enum BorderColor
{
	BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
	BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
	BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
	BORDER_COLOR_INT_OPAQUE_BLACK = 3,
	BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
	BORDER_COLOR_INT_OPAQUE_WHITE = 5,
	BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
	BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
	BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
};

enum SamplerReductionMode
{
	SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
	SAMPLER_REDUCTION_MODE_MIN = 1,
	SAMPLER_REDUCTION_MODE_MAX = 2,
	SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
	SAMPLER_REDUCTION_MODE_MIN_EXT = SAMPLER_REDUCTION_MODE_MIN,
	SAMPLER_REDUCTION_MODE_MAX_EXT = SAMPLER_REDUCTION_MODE_MAX,
	SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF
};

enum AttachmentLoadOp
{
	ATTACHMENT_LOAD_OP_LOAD = 0,
	ATTACHMENT_LOAD_OP_CLEAR = 1,
	ATTACHMENT_LOAD_OP_DONT_CARE = 2,
	ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
	ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
};

enum ImageLayout
{
	IMAGE_LAYOUT_UNDEFINED = 0,
	IMAGE_LAYOUT_GENERAL = 1,
	IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
	IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
	IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
	IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
	IMAGE_LAYOUT_PREINITIALIZED = 8,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
	IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
	IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
	IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
	IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
	IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
	IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
	IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
	IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
	IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
	IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
	IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
	IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
	IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
	IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
	IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
	IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
	IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
};

enum FormatType
{
	FORMAT_TYPE_UNDEFINED = 0,
	FORMAT_TYPE_R4G4_UNORM_PACK8 = 1,
	FORMAT_TYPE_R4G4B4A4_UNORM_PACK16 = 2,
	FORMAT_TYPE_B4G4R4A4_UNORM_PACK16 = 3,
	FORMAT_TYPE_R5G6B5_UNORM_PACK16 = 4,
	FORMAT_TYPE_B5G6R5_UNORM_PACK16 = 5,
	FORMAT_TYPE_R5G5B5A1_UNORM_PACK16 = 6,
	FORMAT_TYPE_B5G5R5A1_UNORM_PACK16 = 7,
	FORMAT_TYPE_A1R5G5B5_UNORM_PACK16 = 8,
	FORMAT_TYPE_R8_UNORM = 9,
	FORMAT_TYPE_R8_SNORM = 10,
	FORMAT_TYPE_R8_USCALED = 11,
	FORMAT_TYPE_R8_SSCALED = 12,
	FORMAT_TYPE_R8_UINT = 13,
	FORMAT_TYPE_R8_SINT = 14,
	FORMAT_TYPE_R8_SRGB = 15,
	FORMAT_TYPE_R8G8_UNORM = 16,
	FORMAT_TYPE_R8G8_SNORM = 17,
	FORMAT_TYPE_R8G8_USCALED = 18,
	FORMAT_TYPE_R8G8_SSCALED = 19,
	FORMAT_TYPE_R8G8_UINT = 20,
	FORMAT_TYPE_R8G8_SINT = 21,
	FORMAT_TYPE_R8G8_SRGB = 22,
	FORMAT_TYPE_R8G8B8_UNORM = 23,
	FORMAT_TYPE_R8G8B8_SNORM = 24,
	FORMAT_TYPE_R8G8B8_USCALED = 25,
	FORMAT_TYPE_R8G8B8_SSCALED = 26,
	FORMAT_TYPE_R8G8B8_UINT = 27,
	FORMAT_TYPE_R8G8B8_SINT = 28,
	FORMAT_TYPE_R8G8B8_SRGB = 29,
	FORMAT_TYPE_B8G8R8_UNORM = 30,
	FORMAT_TYPE_B8G8R8_SNORM = 31,
	FORMAT_TYPE_B8G8R8_USCALED = 32,
	FORMAT_TYPE_B8G8R8_SSCALED = 33,
	FORMAT_TYPE_B8G8R8_UINT = 34,
	FORMAT_TYPE_B8G8R8_SINT = 35,
	FORMAT_TYPE_B8G8R8_SRGB = 36,
	FORMAT_TYPE_R8G8B8A8_UNORM = 37,
	FORMAT_TYPE_R8G8B8A8_SNORM = 38,
	FORMAT_TYPE_R8G8B8A8_USCALED = 39,
	FORMAT_TYPE_R8G8B8A8_SSCALED = 40,
	FORMAT_TYPE_R8G8B8A8_UINT = 41,
	FORMAT_TYPE_R8G8B8A8_SINT = 42,
	FORMAT_TYPE_R8G8B8A8_SRGB = 43,
	FORMAT_TYPE_B8G8R8A8_UNORM = 44,
	FORMAT_TYPE_B8G8R8A8_SNORM = 45,
	FORMAT_TYPE_B8G8R8A8_USCALED = 46,
	FORMAT_TYPE_B8G8R8A8_SSCALED = 47,
	FORMAT_TYPE_B8G8R8A8_UINT = 48,
	FORMAT_TYPE_B8G8R8A8_SINT = 49,
	FORMAT_TYPE_B8G8R8A8_SRGB = 50,
	FORMAT_TYPE_A8B8G8R8_UNORM_PACK32 = 51,
	FORMAT_TYPE_A8B8G8R8_SNORM_PACK32 = 52,
	FORMAT_TYPE_A8B8G8R8_USCALED_PACK32 = 53,
	FORMAT_TYPE_A8B8G8R8_SSCALED_PACK32 = 54,
	FORMAT_TYPE_A8B8G8R8_UINT_PACK32 = 55,
	FORMAT_TYPE_A8B8G8R8_SINT_PACK32 = 56,
	FORMAT_TYPE_A8B8G8R8_SRGB_PACK32 = 57,
	FORMAT_TYPE_A2R10G10B10_UNORM_PACK32 = 58,
	FORMAT_TYPE_A2R10G10B10_SNORM_PACK32 = 59,
	FORMAT_TYPE_A2R10G10B10_USCALED_PACK32 = 60,
	FORMAT_TYPE_A2R10G10B10_SSCALED_PACK32 = 61,
	FORMAT_TYPE_A2R10G10B10_UINT_PACK32 = 62,
	FORMAT_TYPE_A2R10G10B10_SINT_PACK32 = 63,
	FORMAT_TYPE_A2B10G10R10_UNORM_PACK32 = 64,
	FORMAT_TYPE_A2B10G10R10_SNORM_PACK32 = 65,
	FORMAT_TYPE_A2B10G10R10_USCALED_PACK32 = 66,
	FORMAT_TYPE_A2B10G10R10_SSCALED_PACK32 = 67,
	FORMAT_TYPE_A2B10G10R10_UINT_PACK32 = 68,
	FORMAT_TYPE_A2B10G10R10_SINT_PACK32 = 69,
	FORMAT_TYPE_R16_UNORM = 70,
	FORMAT_TYPE_R16_SNORM = 71,
	FORMAT_TYPE_R16_USCALED = 72,
	FORMAT_TYPE_R16_SSCALED = 73,
	FORMAT_TYPE_R16_UINT = 74,
	FORMAT_TYPE_R16_SINT = 75,
	FORMAT_TYPE_R16_SFLOAT = 76,
	FORMAT_TYPE_R16G16_UNORM = 77,
	FORMAT_TYPE_R16G16_SNORM = 78,
	FORMAT_TYPE_R16G16_USCALED = 79,
	FORMAT_TYPE_R16G16_SSCALED = 80,
	FORMAT_TYPE_R16G16_UINT = 81,
	FORMAT_TYPE_R16G16_SINT = 82,
	FORMAT_TYPE_R16G16_SFLOAT = 83,
	FORMAT_TYPE_R16G16B16_UNORM = 84,
	FORMAT_TYPE_R16G16B16_SNORM = 85,
	FORMAT_TYPE_R16G16B16_USCALED = 86,
	FORMAT_TYPE_R16G16B16_SSCALED = 87,
	FORMAT_TYPE_R16G16B16_UINT = 88,
	FORMAT_TYPE_R16G16B16_SINT = 89,
	FORMAT_TYPE_R16G16B16_SFLOAT = 90,
	FORMAT_TYPE_R16G16B16A16_UNORM = 91,
	FORMAT_TYPE_R16G16B16A16_SNORM = 92,
	FORMAT_TYPE_R16G16B16A16_USCALED = 93,
	FORMAT_TYPE_R16G16B16A16_SSCALED = 94,
	FORMAT_TYPE_R16G16B16A16_UINT = 95,
	FORMAT_TYPE_R16G16B16A16_SINT = 96,
	FORMAT_TYPE_R16G16B16A16_SFLOAT = 97,
	FORMAT_TYPE_R32_UINT = 98,
	FORMAT_TYPE_R32_SINT = 99,
	FORMAT_TYPE_R32_SFLOAT = 100,
	FORMAT_TYPE_R32G32_UINT = 101,
	FORMAT_TYPE_R32G32_SINT = 102,
	FORMAT_TYPE_R32G32_SFLOAT = 103,
	FORMAT_TYPE_R32G32B32_UINT = 104,
	FORMAT_TYPE_R32G32B32_SINT = 105,
	FORMAT_TYPE_R32G32B32_SFLOAT = 106,
	FORMAT_TYPE_R32G32B32A32_UINT = 107,
	FORMAT_TYPE_R32G32B32A32_SINT = 108,
	FORMAT_TYPE_R32G32B32A32_SFLOAT = 109,
	FORMAT_TYPE_R64_UINT = 110,
	FORMAT_TYPE_R64_SINT = 111,
	FORMAT_TYPE_R64_SFLOAT = 112,
	FORMAT_TYPE_R64G64_UINT = 113,
	FORMAT_TYPE_R64G64_SINT = 114,
	FORMAT_TYPE_R64G64_SFLOAT = 115,
	FORMAT_TYPE_R64G64B64_UINT = 116,
	FORMAT_TYPE_R64G64B64_SINT = 117,
	FORMAT_TYPE_R64G64B64_SFLOAT = 118,
	FORMAT_TYPE_R64G64B64A64_UINT = 119,
	FORMAT_TYPE_R64G64B64A64_SINT = 120,
	FORMAT_TYPE_R64G64B64A64_SFLOAT = 121,
	FORMAT_TYPE_B10G11R11_UFLOAT_PACK32 = 122,
	FORMAT_TYPE_E5B9G9R9_UFLOAT_PACK32 = 123,
	FORMAT_TYPE_D16_UNORM = 124,
	FORMAT_TYPE_X8_D24_UNORM_PACK32 = 125,
	FORMAT_TYPE_D32_SFLOAT = 126,
	FORMAT_TYPE_S8_UINT = 127,
	FORMAT_TYPE_D16_UNORM_S8_UINT = 128,
	FORMAT_TYPE_D24_UNORM_S8_UINT = 129,
	FORMAT_TYPE_D32_SFLOAT_S8_UINT = 130,
	FORMAT_TYPE_BC1_RGB_UNORM_BLOCK = 131,
	FORMAT_TYPE_BC1_RGB_SRGB_BLOCK = 132,
	FORMAT_TYPE_BC1_RGBA_UNORM_BLOCK = 133,
	FORMAT_TYPE_BC1_RGBA_SRGB_BLOCK = 134,
	FORMAT_TYPE_BC2_UNORM_BLOCK = 135,
	FORMAT_TYPE_BC2_SRGB_BLOCK = 136,
	FORMAT_TYPE_BC3_UNORM_BLOCK = 137,
	FORMAT_TYPE_BC3_SRGB_BLOCK = 138,
	FORMAT_TYPE_BC4_UNORM_BLOCK = 139,
	FORMAT_TYPE_BC4_SNORM_BLOCK = 140,
	FORMAT_TYPE_BC5_UNORM_BLOCK = 141,
	FORMAT_TYPE_BC5_SNORM_BLOCK = 142,
	FORMAT_TYPE_BC6H_UFLOAT_BLOCK = 143,
	FORMAT_TYPE_BC6H_SFLOAT_BLOCK = 144,
	FORMAT_TYPE_BC7_UNORM_BLOCK = 145,
	FORMAT_TYPE_BC7_SRGB_BLOCK = 146,
	FORMAT_TYPE_ETC2_R8G8B8_UNORM_BLOCK = 147,
	FORMAT_TYPE_ETC2_R8G8B8_SRGB_BLOCK = 148,
	FORMAT_TYPE_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	FORMAT_TYPE_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	FORMAT_TYPE_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	FORMAT_TYPE_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	FORMAT_TYPE_EAC_R11_UNORM_BLOCK = 153,
	FORMAT_TYPE_EAC_R11_SNORM_BLOCK = 154,
	FORMAT_TYPE_EAC_R11G11_UNORM_BLOCK = 155,
	FORMAT_TYPE_EAC_R11G11_SNORM_BLOCK = 156,
	FORMAT_TYPE_ASTC_4x4_UNORM_BLOCK = 157,
	FORMAT_TYPE_ASTC_4x4_SRGB_BLOCK = 158,
	FORMAT_TYPE_ASTC_5x4_UNORM_BLOCK = 159,
	FORMAT_TYPE_ASTC_5x4_SRGB_BLOCK = 160,
	FORMAT_TYPE_ASTC_5x5_UNORM_BLOCK = 161,
	FORMAT_TYPE_ASTC_5x5_SRGB_BLOCK = 162,
	FORMAT_TYPE_ASTC_6x5_UNORM_BLOCK = 163,
	FORMAT_TYPE_ASTC_6x5_SRGB_BLOCK = 164,
	FORMAT_TYPE_ASTC_6x6_UNORM_BLOCK = 165,
	FORMAT_TYPE_ASTC_6x6_SRGB_BLOCK = 166,
	FORMAT_TYPE_ASTC_8x5_UNORM_BLOCK = 167,
	FORMAT_TYPE_ASTC_8x5_SRGB_BLOCK = 168,
	FORMAT_TYPE_ASTC_8x6_UNORM_BLOCK = 169,
	FORMAT_TYPE_ASTC_8x6_SRGB_BLOCK = 170,
	FORMAT_TYPE_ASTC_8x8_UNORM_BLOCK = 171,
	FORMAT_TYPE_ASTC_8x8_SRGB_BLOCK = 172,
	FORMAT_TYPE_ASTC_10x5_UNORM_BLOCK = 173,
	FORMAT_TYPE_ASTC_10x5_SRGB_BLOCK = 174,
	FORMAT_TYPE_ASTC_10x6_UNORM_BLOCK = 175,
	FORMAT_TYPE_ASTC_10x6_SRGB_BLOCK = 176,
	FORMAT_TYPE_ASTC_10x8_UNORM_BLOCK = 177,
	FORMAT_TYPE_ASTC_10x8_SRGB_BLOCK = 178,
	FORMAT_TYPE_ASTC_10x10_UNORM_BLOCK = 179,
	FORMAT_TYPE_ASTC_10x10_SRGB_BLOCK = 180,
	FORMAT_TYPE_ASTC_12x10_UNORM_BLOCK = 181,
	FORMAT_TYPE_ASTC_12x10_SRGB_BLOCK = 182,
	FORMAT_TYPE_ASTC_12x12_UNORM_BLOCK = 183,
	FORMAT_TYPE_ASTC_12x12_SRGB_BLOCK = 184,
	FORMAT_TYPE_G8B8G8R8_422_UNORM = 1000156000,
	FORMAT_TYPE_B8G8R8G8_422_UNORM = 1000156001,
	FORMAT_TYPE_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
	FORMAT_TYPE_G8_B8R8_2PLANE_420_UNORM = 1000156003,
	FORMAT_TYPE_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
	FORMAT_TYPE_G8_B8R8_2PLANE_422_UNORM = 1000156005,
	FORMAT_TYPE_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
	FORMAT_TYPE_R10X6_UNORM_PACK16 = 1000156007,
	FORMAT_TYPE_R10X6G10X6_UNORM_2PACK16 = 1000156008,
	FORMAT_TYPE_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
	FORMAT_TYPE_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
	FORMAT_TYPE_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
	FORMAT_TYPE_R12X4_UNORM_PACK16 = 1000156017,
	FORMAT_TYPE_R12X4G12X4_UNORM_2PACK16 = 1000156018,
	FORMAT_TYPE_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
	FORMAT_TYPE_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
	FORMAT_TYPE_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
	FORMAT_TYPE_G16B16G16R16_422_UNORM = 1000156027,
	FORMAT_TYPE_B16G16R16G16_422_UNORM = 1000156028,
	FORMAT_TYPE_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
	FORMAT_TYPE_G16_B16R16_2PLANE_420_UNORM = 1000156030,
	FORMAT_TYPE_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
	FORMAT_TYPE_G16_B16R16_2PLANE_422_UNORM = 1000156032,
	FORMAT_TYPE_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
	FORMAT_TYPE_G8_B8R8_2PLANE_444_UNORM = 1000330000,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
	FORMAT_TYPE_G16_B16R16_2PLANE_444_UNORM = 1000330003,
	FORMAT_TYPE_A4R4G4B4_UNORM_PACK16 = 1000340000,
	FORMAT_TYPE_A4B4G4R4_UNORM_PACK16 = 1000340001,
	FORMAT_TYPE_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
	FORMAT_TYPE_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
	FORMAT_TYPE_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
	FORMAT_TYPE_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
	FORMAT_TYPE_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
	FORMAT_TYPE_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
	FORMAT_TYPE_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
	FORMAT_TYPE_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
	FORMAT_TYPE_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
	FORMAT_TYPE_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
	FORMAT_TYPE_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
	FORMAT_TYPE_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
	FORMAT_TYPE_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
	FORMAT_TYPE_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
	FORMAT_TYPE_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
	FORMAT_TYPE_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
	FORMAT_TYPE_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
	FORMAT_TYPE_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
	FORMAT_TYPE_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
	FORMAT_TYPE_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
	FORMAT_TYPE_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
	FORMAT_TYPE_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
	FORMAT_TYPE_R16G16_S10_5_NV = 1000464000,
	FORMAT_TYPE_A1B5G5R5_UNORM_PACK16_KHR = 1000470000,
	FORMAT_TYPE_A8_UNORM_KHR = 1000470001,
	FORMAT_TYPE_ASTC_4x4_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_4x4_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_5x4_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_5x4_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_5x5_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_5x5_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_6x5_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_6x5_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_6x6_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_6x6_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_8x5_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_8x5_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_8x6_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_8x6_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_8x8_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_8x8_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_10x5_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_10x5_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_10x6_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_10x6_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_10x8_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_10x8_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_10x10_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_10x10_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_12x10_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_12x10_SFLOAT_BLOCK,
	FORMAT_TYPE_ASTC_12x12_SFLOAT_BLOCK_EXT = FORMAT_TYPE_ASTC_12x12_SFLOAT_BLOCK,
	FORMAT_TYPE_G8B8G8R8_422_UNORM_KHR = FORMAT_TYPE_G8B8G8R8_422_UNORM,
	FORMAT_TYPE_B8G8R8G8_422_UNORM_KHR = FORMAT_TYPE_B8G8R8G8_422_UNORM,
	FORMAT_TYPE_G8_B8_R8_3PLANE_420_UNORM_KHR = FORMAT_TYPE_G8_B8_R8_3PLANE_420_UNORM,
	FORMAT_TYPE_G8_B8R8_2PLANE_420_UNORM_KHR = FORMAT_TYPE_G8_B8R8_2PLANE_420_UNORM,
	FORMAT_TYPE_G8_B8_R8_3PLANE_422_UNORM_KHR = FORMAT_TYPE_G8_B8_R8_3PLANE_422_UNORM,
	FORMAT_TYPE_G8_B8R8_2PLANE_422_UNORM_KHR = FORMAT_TYPE_G8_B8R8_2PLANE_422_UNORM,
	FORMAT_TYPE_G8_B8_R8_3PLANE_444_UNORM_KHR = FORMAT_TYPE_G8_B8_R8_3PLANE_444_UNORM,
	FORMAT_TYPE_R10X6_UNORM_PACK16_KHR = FORMAT_TYPE_R10X6_UNORM_PACK16,
	FORMAT_TYPE_R10X6G10X6_UNORM_2PACK16_KHR = FORMAT_TYPE_R10X6G10X6_UNORM_2PACK16,
	FORMAT_TYPE_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = FORMAT_TYPE_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
	FORMAT_TYPE_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = FORMAT_TYPE_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
	FORMAT_TYPE_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = FORMAT_TYPE_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
	FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = FORMAT_TYPE_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
	FORMAT_TYPE_R12X4_UNORM_PACK16_KHR = FORMAT_TYPE_R12X4_UNORM_PACK16,
	FORMAT_TYPE_R12X4G12X4_UNORM_2PACK16_KHR = FORMAT_TYPE_R12X4G12X4_UNORM_2PACK16,
	FORMAT_TYPE_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = FORMAT_TYPE_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
	FORMAT_TYPE_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = FORMAT_TYPE_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
	FORMAT_TYPE_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = FORMAT_TYPE_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
	FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = FORMAT_TYPE_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
	FORMAT_TYPE_G16B16G16R16_422_UNORM_KHR = FORMAT_TYPE_G16B16G16R16_422_UNORM,
	FORMAT_TYPE_B16G16R16G16_422_UNORM_KHR = FORMAT_TYPE_B16G16R16G16_422_UNORM,
	FORMAT_TYPE_G16_B16_R16_3PLANE_420_UNORM_KHR = FORMAT_TYPE_G16_B16_R16_3PLANE_420_UNORM,
	FORMAT_TYPE_G16_B16R16_2PLANE_420_UNORM_KHR = FORMAT_TYPE_G16_B16R16_2PLANE_420_UNORM,
	FORMAT_TYPE_G16_B16_R16_3PLANE_422_UNORM_KHR = FORMAT_TYPE_G16_B16_R16_3PLANE_422_UNORM,
	FORMAT_TYPE_G16_B16R16_2PLANE_422_UNORM_KHR = FORMAT_TYPE_G16_B16R16_2PLANE_422_UNORM,
	FORMAT_TYPE_G16_B16_R16_3PLANE_444_UNORM_KHR = FORMAT_TYPE_G16_B16_R16_3PLANE_444_UNORM,
	FORMAT_TYPE_G8_B8R8_2PLANE_444_UNORM_EXT = FORMAT_TYPE_G8_B8R8_2PLANE_444_UNORM,
	FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = FORMAT_TYPE_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
	FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = FORMAT_TYPE_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
	FORMAT_TYPE_G16_B16R16_2PLANE_444_UNORM_EXT = FORMAT_TYPE_G16_B16R16_2PLANE_444_UNORM,
	FORMAT_TYPE_A4R4G4B4_UNORM_PACK16_EXT = FORMAT_TYPE_A4R4G4B4_UNORM_PACK16,
	FORMAT_TYPE_A4B4G4R4_UNORM_PACK16_EXT = FORMAT_TYPE_A4B4G4R4_UNORM_PACK16,
	FORMAT_TYPE_MAX_ENUM = 0x7FFFFFFF
};

#pragma endregion

struct VkBuffer_T;
struct VkImage_T;
struct VkSampler_T;
struct VkImageView_T;
struct VkDescriptorSet_T;
struct VkDescriptorSetLayout_T;
struct VkDescriptorUpdateTemplate_T;
struct VkRenderPass_T;
struct VkFramebuffer_T;
struct VkDeviceMemory_T;
struct VmaAllocation_T;

struct Sampler
{
	void Destroy() { name.Destroy(); handle = U64_MAX; }

	String			name{};
	HashHandle		handle{ U64_MAX };

	I32				minFilter{ FILTER_TYPE_NEAREST }; //VkFilter
	I32				magFilter{ FILTER_TYPE_NEAREST }; //VkFilter
	I32				mipFilter{ SAMPLER_MIPMAP_MODE_NEAREST }; //VkSamplerMipmapMode

	I32				addressModeU{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode
	I32				addressModeV{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode
	I32				addressModeW{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode

	I32				border{ BORDER_COLOR_FLOAT_OPAQUE_WHITE }; //VkBorderColor

	I32				reductionMode{ SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE }; //VkSamplerReductionMode

	VkSampler_T* sampler{ nullptr };
};

struct SamplerInfo
{
	void Destroy() { name.Destroy(); }

	SamplerInfo& SetMinMagMip(FilterType min, FilterType mag, SamplerMipmapMode mip);
	SamplerInfo& SetAddressModeU(SamplerAddressMode u);
	SamplerInfo& SetAddressModeUV(SamplerAddressMode u, SamplerAddressMode v);
	SamplerInfo& SetAddressModeUVW(SamplerAddressMode u, SamplerAddressMode v, SamplerAddressMode w);
	SamplerInfo& SetName(const String& name);

	I32		minFilter{ FILTER_TYPE_NEAREST }; //VkFilter
	I32		magFilter{ FILTER_TYPE_NEAREST }; //VkFilter
	I32		mipFilter{ SAMPLER_MIPMAP_MODE_NEAREST }; //VkSamplerMipmapMode

	I32		addressModeU{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode
	I32		addressModeV{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode
	I32		addressModeW{ SAMPLER_ADDRESS_MODE_REPEAT }; //VkSamplerAddressMode

	I32		border{ BORDER_COLOR_FLOAT_OPAQUE_WHITE }; //VkBorderColor

	I32		reductionMode{ SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE }; //VkSamplerReductionMode

	String	name{};
};

struct Texture
{
	void Destroy() { name.Destroy(); handle = U64_MAX; }

	String				name{ };
	HashHandle			handle{ U64_MAX };

	U32					size{ 0 };
	U16					width{ 1 };
	U16					height{ 1 };
	U16					depth{ 1 };
	U32					flags{ 0 };

	I32					type{ IMAGE_TYPE_2D }; //VkImageType

	VkImage_T* image{ nullptr };
	VkImageView_T* imageView{ nullptr };
	I32					format{ FORMAT_TYPE_UNDEFINED }; //VkFormat
	I32					imageLayout{ IMAGE_LAYOUT_UNDEFINED }; //VkImageLayout
	VmaAllocation_T* allocation{ nullptr };

	VkImageView_T* mipmaps[MAX_MIPMAP_COUNT]{ nullptr };
	U8					mipmapCount{ 1 };

	Sampler* sampler{ nullptr };

	bool				swapchainImage{ false };
	bool				mipmapsGenerated{ false };
};

struct TextureInfo
{
	void Destroy() { name.Destroy(); }

	TextureInfo& SetSize(U16 width, U16 height, U16 depth);
	TextureInfo& SetFormatType(FormatType format, ImageType type);
	TextureInfo& SetName(const String& name);
	TextureInfo& SetData(void* data);

	void* initialData{ nullptr };
	U16		width{ 1 };
	U16		height{ 1 };
	U16		depth{ 1 };
	U32		flags{ 0 };
	U8		mipmapCount{ 1 };

	I32		format{ FORMAT_TYPE_UNDEFINED }; //VkFormat
	I32		type{ IMAGE_TYPE_2D }; //VkImageType

	String	name{};
};

struct Buffer
{
	I32					usage{ 0 }; //VkBufferUsageFlags
	I32					memoryProperties{ 0 }; //VkMemoryPropertyFlags

	VkBuffer_T* vkBuffer{ nullptr };
	VkDeviceMemory_T* deviceMemory{ nullptr };
	VmaAllocation_T* allocation{ nullptr };
	U32					size{ 0 };
	U32					allocationOffset{ 0 };

	void* data{ nullptr };
	bool mapped{ false };
};

struct Binary
{
	U32 size{ 0 };
	void* data{ nullptr };
};

struct Renderpass
{
	void Destroy() { name.Destroy(); handle = U64_MAX; }

	void Resize();

	String				name{};
	HashHandle			handle;

	VkRenderPass_T* renderpass{ nullptr };
	VkFramebuffer_T* frameBuffer{ nullptr };

	Texture* renderTargets[MAX_IMAGE_OUTPUTS]{ nullptr };
	U8					renderTargetCount{ 0 };
	Texture* depthStencilTarget{ nullptr };

	I32					colorLoadOp{ ATTACHMENT_LOAD_OP_DONT_CARE }; //VkAttachmentLoadOp
	I32					depthLoadOp{ ATTACHMENT_LOAD_OP_DONT_CARE }; //VkAttachmentLoadOp
	I32					stencilLoadOp{ ATTACHMENT_LOAD_OP_DONT_CARE }; //VkAttachmentLoadOp

	U32					renderOrder{ 0 };
	U32					lastResize{ 0 };
};

struct RenderpassInfo
{
	void Destroy() { name.Destroy(); }

	RenderpassInfo& Reset();
	RenderpassInfo& AddRenderTarget(Texture* texture);
	RenderpassInfo& SetDepthStencilTarget(Texture* texture);

	U8				renderTargetCount{ 0 };

	Texture* renderTargets[MAX_IMAGE_OUTPUTS]{ nullptr };
	Texture* depthStencilTarget{ nullptr };

	I32				colorLoadOp{ ATTACHMENT_LOAD_OP_CLEAR }; //VkAttachmentLoadOp
	I32				depthLoadOp{ ATTACHMENT_LOAD_OP_CLEAR }; //VkAttachmentLoadOp
	I32				stencilLoadOp{ ATTACHMENT_LOAD_OP_DONT_CARE }; //VkAttachmentLoadOp
	I32 	        attachmentFinalLayout{ IMAGE_LAYOUT_ATTACHMENT_OPTIMAL }; //VkImageLayout

	U32				renderOrder{ 0 };
	String			name{};
};

struct PushConstant
{
	U32 offset;
	U32 size;
	void* data;
};

struct Vertex
{
	Vector3 position;
	Vector3 normal;
	Vector3 tangent;
	Vector3 bitangent;
	Vector2 texcoord;
};

struct Material
{
	U32			diffuseTextureIndex{ U16_MAX };
	U32			metalRoughOcclTextureIndex{ U16_MAX };
	U32			normalTextureIndex{ U16_MAX };
	U32			emissivityTextureIndex{ U16_MAX };

	Vector4		baseColorFactor{ Vector4::One };
	Vector4		metalRoughFactor{ Vector4::One };
	Vector4		emissiveFactor{ Vector4::Zero };

	F32			alphaCutoff{ 0.0f };
	U32			flags{ MATERIAL_FLAG_NONE };

	U32			unused[2];
};

struct MeshInstance
{
	U32 materialIndex;
	Matrix4 model{ };
};

struct DrawCall
{
	U32 indexCount;
	U32 indexOffset;
	U32 vertexOffset;

	Vector<MeshInstance> instances;
};

struct Model
{
	void Destroy() { name.Destroy(); meshes.Destroy(); handle = U64_MAX; }

	String		name{};
	HashHandle	handle;

	Vector<DrawCall> meshes;
};

struct Skybox
{
	void Destroy() { name.Destroy(); handle = U64_MAX; }

	String      name{};
	HashHandle	handle;

	U32         instance;
	Texture* texture{ nullptr };
};

struct Transform
{
	Vector3 position;
	Vector3 scale;
	Quaternion3 rotation;

	void CalculateMatrix(Matrix4& matrix)
	{
		matrix.Set(position, rotation, scale);
	}
};

struct ResourceUpdate
{
	ResourceUpdateType	type;
	HashHandle			handle;
	U32					currentFrame;
};

struct MeshUpload
{
	U16 materialIndex{ U16_MAX };

	U32 verticesSize{ 0 };
	Vertex* vertices{ nullptr };
	U32 indicesSize{ 0 };
	U32* indices{ nullptr };

	U32 instanceCount{ 0 };
	Matrix4 instances[32];
};

struct ModelUpload
{
	U32 textureCount{ 0 };
	String textures[32]{};
	U32 materialCount{ 0 };
	Material materials[32];
	U32 meshCount{ 0 };
	MeshUpload meshes[32];
};

struct Camera
{
	void SetOrthograpic(F32 nearPlane, F32 farPlane, F32 viewportWidth, F32 viewportHeight, F32 zoom);
	void SetPerspective(F32 nearPlane, F32 farPlane, F32 fov, F32 aspectRatio);
	void SetAspectRatio(F32 aspectRatio);

	const F32& Near() const;
	const F32& Far() const;
	const Matrix4& Projection() const;
	const Matrix4& ViewProjection() const;
	Vector4 Eye() const;
	const Vector3& Position() const;
	Quaternion3 Rotation() const;
	Vector3 Euler() const;
	const Vector3& Right() const;
	const Vector3& Up() const;
	const Vector3& Forward() const;

	bool Perspective() const;

	void SetPosition(const Vector3& position);
	void SetRotation(const Quaternion3& rotation);
	void SetRotation(const Vector3& rotation);

	bool Update();

private:
	Matrix4	view{ Matrix4::Identity };
	Matrix4	projection{ Matrix4::Identity };
	Matrix4	viewProjection{ Matrix4::Identity };

	Vector3	position{ Vector3::Zero };
	Vector3	right{ Vector3::Right };
	Vector3	forward{ Vector3::Forward };
	Vector3	up{ Vector3::Up };

	F32		pitch{ 0.0f };
	F32		yaw{ 0.0f };
	F32		roll{ 0.0f };

	F32		nearPlane{ 0.0f };
	F32		farPlane{ 0.0f };

	F32		fov{ 0.0f };
	F32		aspectRatio{ 0.0f };

	F32		zoom{ 0.0f };
	F32		viewportWidth{ 0.0f };
	F32		viewportHeight{ 0.0f };

	bool	perspective{ false };
	bool	updateProjection{ false };
	bool	updateView{ false };

	friend class Resources;
};

struct FlyCamera
{
	void SetOrthograpic(F32 nearPlane, F32 farPlane, F32 viewportWidth, F32 viewportHeight, F32 zoom);
	void SetPerspective(F32 nearPlane, F32 farPlane, F32 fov, F32 aspectRatio);

	const Matrix4& ViewProjection() const;
	Vector4 Eye() const;

	bool Update();

private:
	F32		mouseSensitivity{ 1.0f };
	F32		movementDelta{ 0.1f };
	U32		ignoreDraggingFrames{ 3 };

	Vector3	targetMovement{ Vector3::Zero };
	F32		targetYaw{ 0.0f };
	F32		targetPitch{ 0.0f };

	bool	mouseDragging{ false };

	F32		rotationSpeed{ 20.0f };
	F32		movementSpeed{ 5.0f };

	Camera camera;
};

struct CommandBuffer;
struct Renderpass;
struct Pipeline;

struct Pass
{
	Renderpass* renderpass;
	Vector<Pipeline*> pipelines;
};

struct RenderGraph
{
	void Destroy();

	void AddPipeline(Pipeline* pipeline);

private:
	Texture* Run(CommandBuffer* commandBuffer);

	Vector<Pass> passes;

	friend class Renderer;
};